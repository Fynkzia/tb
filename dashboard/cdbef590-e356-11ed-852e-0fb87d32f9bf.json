{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "d7117ff4-df53-0c77-362d-3e6295d95984" : {
          "isSystemType" : true,
          "bundleAlias" : "entity_admin_widgets",
          "typeAlias" : "asset_admin_table",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1684146013340,
                  "endTimeMs" : 1684232413340
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Asset table",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : true,
              "displayEntityLabel" : false,
              "displayEntityType" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "Asset table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f4a29435-b26f-a908-6427-54b9dc557519",
              "filterId" : "8fd118e4-d094-8c99-01c6-a70f53565176",
              "dataKeys" : [ {
                "name" : "ResponsibleFullName",
                "type" : "attribute",
                "label" : "Responsible",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.36330953965416724,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "showTitleIcon" : false,
            "titleIcon" : "more_horiz",
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "actions" : {
              "headerButton" : [ {
                "name" : "Add asset",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addAssetForm=\"ngForm\" [formGroup]=\"addAssetFormGroup\"\r\n      (ngSubmit)=\"save()\" style=\"width: 480px;\">\r\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n    <h2>Додати об'єкт</h2>\r\n    <span fxFlex></span>\r\n    <button mat-button mat-icon-button\r\n            (click)=\"cancel()\"\r\n            type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n  </mat-progress-bar>\r\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n  <div mat-dialog-content>\r\n      <div class=\"mat-padding\" fxLayout=\"column\" fxLayoutGap=\"8px\">\r\n          <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                <mat-form-field class=\"mat-block\" fxFlex=\"50\">\r\n                    <mat-label>Назва</mat-label>\r\n                    <input matInput formControlName=\"assetName\" required>\r\n                    <mat-error *ngIf=\"addAssetFormGroup.get('assetName').hasError('required')\">\r\n                        Назва є обов'язковим полем\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\">\r\n                    <tb-entity-subtype-autocomplete\r\n                        fxFlex=\"50\"\r\n                        formControlName=\"assetType\"\r\n                        [required]=\"true\"\r\n                        [entityType]=\"'ASSET'\"\r\n                    ></tb-entity-subtype-autocomplete>\r\n                </div>\r\n          </div>\r\n\r\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\r\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                    <mat-form-field fxFlex=\"50\" class=\"mat-block\">\r\n                        <mat-label>Відповідальний</mat-label>\r\n                        <input matInput formControlName=\"Responsible\">\r\n                    </mat-form-field>\r\n                <!--    <mat-form-field fxFlex=\"50\" class=\"mat-block\">-->\r\n                <!--        <mat-label>Місто/село</mat-label>-->\r\n                <!--        <input matInput formControlName=\"City\" required>-->\r\n                <!--    </mat-form-field>-->\r\n                </div>\r\n\r\n                <!--<mat-form-field fxFlex=\"50\" class=\"mat-block\">-->\r\n                <!--    <mat-label>Район та область</mat-label>-->\r\n                <!--    <input matInput formControlName=\"Region\" required>-->\r\n                <!--</mat-form-field>-->\r\n            </div>\r\n      </div>\r\n        <div class=\"relations-list\">\r\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>\r\n            <div class=\"body\" [fxShow]=\"relations().length\">\r\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">\r\n                        <div fxFlex fxLayout=\"column\">\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\r\n                                    <mat-label>Direction</mat-label>\r\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\r\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\r\n                                            <span>{{direction.value}}</span>\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\r\n                                        Relation direction is required.\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                                <tb-relation-type-autocomplete\r\n                                        fxFlex class=\"mat-block\"\r\n                                        formControlName=\"relationType\"\r\n                                        [required]=\"true\">\r\n                                </tb-relation-type-autocomplete>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                                <tb-entity-select\r\n                                        fxFlex class=\"mat-block\"\r\n                                        [required]=\"true\"\r\n                                        formControlName=\"relatedEntity\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                            <button mat-icon-button color=\"primary\"\r\n                                    aria-label=\"Remove\"\r\n                                    type=\"button\"\r\n                                    (click)=\"removeRelation(i)\"\r\n                                    matTooltip=\"Remove relation\"\r\n                                    matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button mat-raised-button color=\"primary\"\r\n                        type=\"button\"\r\n                        (click)=\"addRelation()\"\r\n                        matTooltip=\"Add Relation\"\r\n                        matTooltipPosition=\"above\">\r\n                    Додати\r\n                </button>\r\n            </div>\r\n      </div>\r\n  </div>\r\n  <div mat-dialog-actions fxLayout=\"row\">\r\n    <span fxFlex></span>\r\n    <button mat-button color=\"primary\"\r\n            type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n      Відміна\r\n    </button>\r\n    <button mat-button mat-raised-button color=\"primary\"\r\n            style=\"margin-right: 20px;\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || addAssetForm.invalid || !addAssetForm.dirty\">\r\n      Додати\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenAddAssetDialog();\n\nfunction openAddAssetDialog() {\n    customDialog.customDialog(htmlTemplate, AddAssetDialogController).subscribe();\n}\n\nfunction AddAssetDialogController(instance) {\n    let vm = instance;\n    \n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    }\n    \n    vm.addAssetFormGroup = vm.fb.group({\n      assetName: ['', [vm.validators.required]],\n      assetType: ['', [vm.validators.required]],\n      attributes: vm.fb.group({\n          ResponsibleFullName: [null],\n      }),\n      relations: vm.fb.array([])\n    });\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.relations = function() {\n        return vm.addAssetFormGroup.get('relations');\n    }\n    \n    vm.addRelation = function() {\n        vm.relations().push(vm.fb.group({\n         relatedEntity: [null, [vm.validators.required]],\n         relationType: [\"Contains\", [vm.validators.required]],\n         direction: [\"FROM\", [vm.validators.required]]\n        }));\n    };\n\n    vm.removeRelation = function(index) {\n        vm.relations().removeAt(index);\n        vm.relations().markAsDirty();\n    };\n    \n    vm.save = function() {\n        vm.addAssetFormGroup.markAsPristine();\n        let asset = {\n            name: vm.addAssetFormGroup.get('assetName').value,\n            type: vm.addAssetFormGroup.get('assetType').value,\n        };\n        assetService.saveAsset(asset).subscribe(\n            function (asset) {\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(asset.id),\n                    saveRelations(asset.id)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n    \n    function saveAttributes(entityId) {\n        let attributes = vm.addAssetFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            attributesArray.push({key: key, value: attributes[key]});\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n    \n    function saveRelations(entityId) {\n        let relations = vm.addAssetFormGroup.get('relations').value;\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "70837a9d-c3de-a9a7-03c5-dccd14998758"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit asset",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\r\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\r\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n        <h2>Редагувати об'єкт</h2>\r\n        <span fxFlex></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n    <div mat-dialog-content fxLayout=\"column\">\r\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n            <mat-form-field fxFlex class=\"mat-block\">\r\n                <mat-label>Назва</mat-label>\r\n                <input matInput formControlName=\"entityName\" required readonly=\"\">\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex class=\"mat-block\">\r\n                <mat-label>Тип</mat-label>\r\n                <input matInput formControlName=\"type\">\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\r\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                    <mat-form-field fxFlex=\"50\" class=\"mat-block\">\r\n                        <mat-label>Відповідальний</mat-label>\r\n                        <input matInput formControlName=\"Responsible\" >\r\n                    </mat-form-field>\r\n                <!--    <mat-form-field fxFlex=\"50\" class=\"mat-block\">-->\r\n                <!--        <mat-label>Місто/село</mat-label>-->\r\n                <!--        <input matInput formControlName=\"City\" required readonly=\"\">-->\r\n                <!--    </mat-form-field>-->\r\n                </div>\r\n\r\n                <!--<mat-form-field fxFlex=\"50\" class=\"mat-block\">-->\r\n                <!--    <mat-label>Район та область</mat-label>-->\r\n                <!--    <input matInput formControlName=\"Region\" required readonly=\"\">-->\r\n                <!--</mat-form-field>-->\r\n        </div>\r\n        <div class=\"relations-list old-relations\">\r\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>\r\n            <div class=\"body\" [fxShow]=\"oldRelations().length\">\r\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" \r\n                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">\r\n                        <div fxFlex fxLayout=\"column\">\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\r\n                                    <mat-label>Direction</mat-label>\r\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\r\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\r\n                                            <span>{{direction.value}}</span>\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\r\n                                        Relation direction is required.\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                                <tb-relation-type-autocomplete\r\n                                        fxFlex class=\"mat-block\"\r\n                                        formControlName=\"relationType\"\r\n                                        required=\"true\">\r\n                                </tb-relation-type-autocomplete>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                                <tb-entity-select\r\n                                        fxFlex class=\"mat-block\"\r\n                                        required=\"true\"\r\n                                        formControlName=\"relatedEntity\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                            <button mat-icon-button color=\"primary\"\r\n                                    aria-label=\"Remove\"\r\n                                    type=\"button\"\r\n                                    (click)=\"removeOldRelation(i)\"\r\n                                    matTooltip=\"Remove relation\"\r\n                                    matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"relations-list\">\r\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>\r\n            <div class=\"body\" [fxShow]=\"relations().length\">\r\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">\r\n                        <div fxFlex fxLayout=\"column\">\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\r\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\r\n                                    <mat-label>Direction</mat-label>\r\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\r\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\r\n                                            <span>{{direction.value}}</span>\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\r\n                                        Relation direction is required.\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                                <tb-relation-type-autocomplete\r\n                                        fxFlex class=\"mat-block\"\r\n                                        formControlName=\"relationType\"\r\n                                        [required]=\"true\">\r\n                                </tb-relation-type-autocomplete>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                                <tb-entity-select\r\n                                        fxFlex class=\"mat-block\"\r\n                                        [required]=\"true\"\r\n                                        formControlName=\"relatedEntity\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                            <button mat-icon-button color=\"primary\"\r\n                                    aria-label=\"Remove\"\r\n                                    type=\"button\"\r\n                                    (click)=\"removeRelation(i)\"\r\n                                    matTooltip=\"Remove relation\"\r\n                                    matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button mat-raised-button color=\"primary\"\r\n                        type=\"button\"\r\n                        (click)=\"addRelation()\"\r\n                        matTooltip=\"Add Relation\"\r\n                        matTooltipPosition=\"above\">\r\n                    Додати\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-button color=\"primary\"\r\n                type=\"button\"\r\n                [disabled]=\"(isLoading$ | async)\"\r\n                (click)=\"cancel()\" cdkFocusInitial>\r\n            Відмінити\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n                type=\"submit\"\r\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Зберегти\r\n        </button>\r\n    </div>\r\n</form>",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\r\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\r\n\r\nopenEditEntityDialog();\r\n\r\nfunction openEditEntityDialog() {\r\ncustomDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\r\n}\r\n\r\nfunction EditEntityDialogController(instance) {\r\nlet vm = instance;\r\n\r\n    vm.entityName = entityName;\r\n    vm.entityType = entityId.entityType;\r\n    vm.entitySearchDirection = {\r\n        from: \"FROM\",\r\n        to: \"TO\"\r\n    };\r\n    vm.attributes = {};\r\n    vm.oldRelationsData = [];\r\n    vm.relationsToDelete = [];\r\n    vm.entity = {};\r\n\r\n    vm.editEntityFormGroup = vm.fb.group({\r\n        entityName: ['', [vm.validators.required]],\r\n        entityType: [null],\r\n        entityLabel: [null],\r\n        type: ['', [vm.validators.required]],\r\n        attributes: vm.fb.group({\r\n            Responsible: [null],\r\n        }),\r\n        oldRelations: vm.fb.array([]),\r\n        relations: vm.fb.array([])\r\n    });\r\n\r\n    getEntityInfo();\r\n\r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.relations = function() {\r\n        return vm.editEntityFormGroup.get('relations');\r\n    };\r\n\r\n    vm.oldRelations = function() {\r\n        return vm.editEntityFormGroup.get('oldRelations');\r\n    };\r\n\r\n    vm.addRelation = function() {\r\n        vm.relations().push(vm.fb.group({\r\n            relatedEntity: [null, [vm.validators.required]],\r\n            relationType: [\"Contains\", [vm.validators.required]],\r\n            direction: [\"FROM\", [vm.validators.required]]\r\n        }));\r\n    };\r\n\r\n    function addOldRelation() {\r\n        vm.oldRelations().push(vm.fb.group({\r\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\r\n            relationType: [{value: null, disabled: true}, [vm.validators.required]],\r\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\r\n        }));\r\n    }\r\n\r\n    vm.removeRelation = function(index) {\r\n        vm.relations().removeAt(index);\r\n        vm.relations().markAsDirty();\r\n    };\r\n\r\n    vm.removeOldRelation = function(index) {\r\n        vm.oldRelations().removeAt(index);\r\n        vm.relationsToDelete.push(vm.oldRelationsData[index]);\r\n        vm.oldRelations().markAsDirty();\r\n    };\r\n\r\n    vm.save = function() {\r\n        vm.editEntityFormGroup.markAsPristine();\r\n        widgetContext.rxjs.forkJoin([\r\n            saveAttributes(entityId),\r\n            saveRelations(entityId),\r\n            saveEntity()\r\n        ]).subscribe(\r\n            function () {\r\n                widgetContext.updateAliases();\r\n                vm.dialogRef.close(null);\r\n            }\r\n        );\r\n    };\r\n\r\n    function getEntityAttributes(attributes) {\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            vm.attributes[attributes[i].key] = attributes[i].value;\r\n        }\r\n    }\r\n\r\n    function getEntityRelations(relations) {\r\n        let relationsFrom = relations[0];\r\n        let relationsTo = relations[1];\r\n        for (let i=0; i < relationsFrom.length; i++) {\r\n            let relation = {\r\n                direction: 'FROM',\r\n                relationType: relationsFrom[i].type,\r\n                relatedEntity: relationsFrom[i].to\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n        }\r\n        for (let i=0; i < relationsTo.length; i++) {\r\n            let relation = {\r\n                direction: 'TO',\r\n                relationType: relationsTo[i].type,\r\n                relatedEntity: relationsTo[i].from\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n        }\r\n    }\r\n\r\n    function getEntityInfo() {\r\n        widgetContext.rxjs.forkJoin([\r\n            entityRelationService.findInfoByFrom(entityId),\r\n            entityRelationService.findInfoByTo(entityId),\r\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\r\n            entityService.getEntity(entityId.entityType, entityId.id)\r\n        ]).subscribe(\r\n            function (data) {\r\n                getEntityRelations(data.slice(0,2));\r\n                getEntityAttributes(data[2]);\r\n                vm.entity = data[3];\r\n                vm.editEntityFormGroup.patchValue({\r\n                    entityName: vm.entity.name,\r\n                    entityType: vm.entityType,\r\n                    entityLabel: vm.entity.label,\r\n                    type: vm.entity.type,\r\n                    attributes: vm.attributes,\r\n                    oldRelations: vm.oldRelationsData\r\n                }, {emitEvent: false});\r\n            }\r\n        );\r\n    }\r\n\r\n    function saveEntity() {\r\n        const formValues = vm.editEntityFormGroup.value;\r\n        if (vm.entity.label !== formValues.entityLabel){\r\n            vm.entity.label = formValues.entityLabel;\r\n            if (formValues.entityType == 'ASSET') {\r\n                return assetService.saveAsset(vm.entity);\r\n            } else if (formValues.entityType == 'DEVICE') {\r\n                return deviceService.saveDevice(vm.entity);\r\n            }\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveAttributes(entityId) {\r\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\r\n        let attributesArray = [];\r\n        for (let key in attributes) {\r\n            if (attributes[key] !== vm.attributes[key]) {\r\n                attributesArray.push({key: key, value: attributes[key]});\r\n            }\r\n        }\r\n        if (attributesArray.length > 0) {\r\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveRelations(entityId) {\r\n        let relations = vm.editEntityFormGroup.get('relations').value;\r\n        let tasks = [];\r\n        for(let i=0; i < relations.length; i++) {\r\n            let relation = {\r\n                type: relations[i].relationType,\r\n                typeGroup: 'COMMON'\r\n            };\r\n            if (relations[i].direction == 'FROM') {\r\n                relation.to = relations[i].relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = relations[i].relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService.saveRelation(relation));\r\n        }\r\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\r\n            let relation = {\r\n                type: vm.relationsToDelete[i].relationType\r\n            };\r\n            if (vm.relationsToDelete[i].direction == 'FROM') {\r\n                relation.to = vm.relationsToDelete[i].relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm.relationsToDelete[i].relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\r\n        }\r\n        if (tasks.length > 0) {\r\n            return widgetContext.rxjs.forkJoin(tasks);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "93931e52-5d7c-903e-67aa-b9435df44ff4"
              }, {
                "name" : "Delete asset",
                "icon" : "delete",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteAssetDialog();\n\nfunction openDeleteAssetDialog() {\n    let title = \"Are you sure you want to delete the asset \" + entityName +  \"?\";\n    let content = \"Be careful, after the confirmation, the asset and all related data will become unrecoverable!\";\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function (result) {\n            if (result) {\n                deleteAsset();\n            }\n        }\n    );\n}\n\nfunction deleteAsset() {\n    assetService.deleteAsset(entityId.id).subscribe(\n        function () {\n            widgetContext.updateAliases();\n        }\n    );\n}\n",
                "id" : "ec2708f6-9ff0-186b-e4fc-7635ebfa3074"
              } ],
              "rowClick" : [ {
                "name" : "more info",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "// Class definitions must come before there use\r\nclass PageLink {\r\n  constructor(pageSize, page = 0, textSearch = null, sortOrder = null) {\r\n    this.textSearch = textSearch;\r\n    this.pageSize = pageSize;\r\n    this.page = page;\r\n    this.sortOrder = sortOrder;\r\n  }\r\n\r\n  toQuery() {\r\n    let query = `?pageSize=${this.pageSize}&page=${this.page}`;\r\n    if (this.textSearch && this.textSearch.length) {\r\n      const textSearch = encodeURIComponent(this.textSearch);\r\n      query += `&textSearch=${textSearch}`;\r\n    }\r\n    if (this.sortOrder) {\r\n      query += `&sortProperty=${this.sortOrder.property}&sortOrder=${this.sortOrder.direction}`;\r\n    }\r\n    return query;\r\n  }\r\n}\r\nlet targetDashboardName;\r\nlet targetDashboardId = null;\r\nlet itemObservable;\r\nlet deviceObservable = widgetContext.deviceService.getDevice(entityId.id);\r\nlet assetObservable = widgetContext.assetService.getAsset(entityId.id);\r\n\r\nif(entityId.entityType == 'ASSET') {\r\n    itemObservable = assetObservable;\r\n    targetDashboardName = \"asset db\";\r\n    targetDashboardId = \"cdbef590-e356-11ed-852e-0fb87d32f9bf\";\r\n\r\n}\r\nif(entityId.entityType == 'DEVICE') {\r\n    itemObservable = deviceObservable;\r\n    targetDashboardId = \"213a54e0-d3ac-11ed-a776-91b88e4188de\";\r\n    targetDashboardName = \"device db\";\r\n}\r\n\r\nitemObservable.toPromise().then(function(itemResponse) {\r\n\r\n    const pageLink = new PageLink(\r\n        200, //pageSize\r\n        0,   //page\r\n        \"\",  //textSearch\r\n        {\r\n            property:  \"title\",\r\n            direction: \"ASC\"\r\n        }\r\n    );\r\n    const targetEntityParamName   = \"\"; //stateEntityParamName;\r\n    const targetEntityId          = entityId;\r\n    let   targetDashboardStateId  = \"\";\r\n    let   openNewBrowserTab       = false;\r\n    let   customerPathType        = 0;\r\n    let   customerPath            = \"\";\r\n    let   dashboardPathType       = 0;\r\n    let   dashboardPath           = \"\";\r\n    // let   dashboardListObservable = widgetContext.dashboardService.getTenantDashboards(pageLink, {ignoreLoading: true});\r\n\r\n    // dashboardListObservable.toPromise().then(function(dashboardListResponse) {\r\n\r\n        let currentUrl = window.location.toString();\r\n\r\n        if (currentUrl.indexOf(\"customerGroups\") != -1) {\r\n            customerPathType = 1;\r\n            customerPath = currentUrl.substring(currentUrl.indexOf(\"customerGroups/\"), currentUrl.indexOf(\"/\", currentUrl.indexOf(\"/\", currentUrl.indexOf(\"customerGroups/\") + 15) + 1));\r\n        }\r\n\r\n        if (currentUrl.indexOf(\"dashboardGroups/\") != -1) {\r\n            dashboardPathType = 1;\r\n            dashboardPath = currentUrl.substring(currentUrl.indexOf(\"dashboardGroups/\"), currentUrl.indexOf(\"/\", currentUrl.indexOf(\"dashboardGroups/\") + 16));\r\n        }\r\n        else if (currentUrl.indexOf(\"dashboards/\") != -1) {\r\n            dashboardPathType = 2;\r\n            dashboardPath = \"dashboards\";\r\n        }\r\n        else if (currentUrl.indexOf(\"dashboard/\") != -1) {\r\n            dashboardPathType = 3;\r\n            dashboardPath = \"dashboard\";\r\n        }\r\n\r\n        // //get dashboard by name\r\n        // let targetDashboardId = null;\r\n        // let dashboardListResponseDataIndex = dashboardListResponse.data.map(function(a) { return a.title; }).indexOf(targetDashboardName);\r\n        // if (dashboardListResponseDataIndex > -1) {\r\n        //     targetDashboardId = dashboardListResponse.data[dashboardListResponseDataIndex].id.id;\r\n        // }\r\n\r\n        const stateObject  = {};\r\n        stateObject.params = {};\r\n\r\n        updateEntityParams(stateObject.params, targetEntityParamName, targetEntityId, entityName, entityLabel);\r\n\r\n        //get dashboard state by name??\r\n\r\n        if (targetDashboardStateId) {\r\n            stateObject.id = targetDashboardStateId;\r\n        }\r\n\r\n        const state = objToBase64URI([ stateObject ]);\r\n        let newUrl = \"/\";\r\n\r\n        // \"dashboard/\" is used when you want to introduce exactly that dashboard full screen.\r\n        // \"dashboards/\" is used when you want you dashboards (left nav bar), but without breadcrumb with a link to the group.\r\n        // \"dashboardGroups/\" is used when you want all hierarchy to your dashboard (left nav bar and breadcrumb).\r\n\r\n        if (customerPathType != 0) {\r\n            newUrl += `${customerPath}/`;\r\n        }\r\n\r\n        if (dashboardPathType != 0) {\r\n            newUrl += `${dashboardPath}/`;\r\n        }\r\n\r\n        newUrl += `${targetDashboardId}?state=${state}`;\r\n\r\n        if (openNewBrowserTab) {\r\n            window.open(newUrl, '_blank');\r\n        } else {\r\n            widgetContext.router.navigateByUrl(newUrl);\r\n        }\r\n    // }).catch((error) => {\r\n    //   console.error(error);\r\n    // });\r\n}).catch((error) => {\r\n  console.error(error);\r\n});\r\n\r\nfunction updateEntityParams(params /*StateParams*/, targetEntityParamName /*string?*/, targetEntityId /*EntityId*/, entityName /*string?*/, entityLabel /*string?*/) {\r\n    if (targetEntityId) {\r\n        let targetEntityParams;\r\n        \r\n        if (targetEntityParamName && targetEntityParamName.length) {\r\n            targetEntityParams = params[targetEntityParamName];\r\n            \r\n            if (!targetEntityParams) {\r\n                targetEntityParams = {};\r\n                params[targetEntityParamName] = targetEntityParams;\r\n                params.targetEntityParamName = targetEntityParamName;\r\n            }\r\n        } else {\r\n            targetEntityParams = params;\r\n        }\r\n        targetEntityParams.entityId = targetEntityId;\r\n        if (entityName) {\r\n            targetEntityParams.entityName = entityName;\r\n        }\r\n        if (entityLabel) {\r\n            targetEntityParams.entityLabel = entityLabel;\r\n        }\r\n    }\r\n}\r\n\r\nfunction objToBase64(obj /*any*/) {\r\n    const json = JSON.stringify(obj);\r\n    \r\n    return btoa(encodeURIComponent(json).replace(/%([0-9A-F]{2})/g,\r\n        function toSolidBytes(match, p1) {\r\n            return String.fromCharCode(Number('0x' + p1));\r\n        }));\r\n}\r\n\r\nfunction objToBase64URI(obj /*any*/) {\r\n    return encodeURIComponent(objToBase64(obj));\r\n}",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "e4dd7307-90df-a819-d01b-683d9f5fdd82"
              } ]
            },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "d7117ff4-df53-0c77-362d-3e6295d95984"
        }
      },
      "states" : {
        "default" : {
          "name" : "asset db",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "d7117ff4-df53-0c77-362d-3e6295d95984" : {
                  "sizeX" : 11,
                  "sizeY" : 8,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "f4a29435-b26f-a908-6427-54b9dc557519" : {
          "id" : "f4a29435-b26f-a908-6427-54b9dc557519",
          "alias" : "asset",
          "filter" : {
            "type" : "relationsQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "filters" : [ ]
          }
        },
        "bab3361c-3bc1-030e-626b-548591f3927e" : {
          "id" : "bab3361c-3bc1-030e-626b-548591f3927e",
          "alias" : "state asset",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        }
      },
      "filters" : {
        "8fd118e4-d094-8c99-01c6-a70f53565176" : {
          "id" : "8fd118e4-d094-8c99-01c6-a70f53565176",
          "filter" : "user",
          "keyFilters" : [ {
            "key" : {
              "type" : "ATTRIBUTE",
              "key" : "ResponsibleEmail"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "",
                  "dynamicValue" : {
                    "sourceType" : "CURRENT_USER",
                    "sourceAttribute" : "email",
                    "inherit" : false
                  }
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1682333351330,
            "endTimeMs" : 1682419751330
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "cdbef590-e356-11ed-852e-0fb87d32f9bf"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "asset db",
    "ownerId" : null,
    "title" : "asset db"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}